import random
import string

class Password:
    def __init__(self, use_lowercase=True, use_uppercase=True, use_digits=True, use_punctuation=True):
        self.use_lowercase = use_lowercase
        self.use_uppercase = use_uppercase
        self.use_digits = use_digits
        self.use_punctuation = use_punctuation
        
        self.character_sets = {
            'lowercase': string.ascii_lowercase,
            'uppercase': string.ascii_uppercase,
            'digits': string.digits,
            'punctuation': string.punctuation
        }
        
        self.required_characters = []
        if self.use_lowercase:
            self.required_characters.append(random.choice(self.character_sets['lowercase']))
        if self.use_uppercase:
            self.required_characters.append(random.choice(self.character_sets['uppercase']))
        if self.use_digits:
            self.required_characters.append(random.choice(self.character_sets['digits']))
        if self.use_punctuation:
            self.required_characters.append(random.choice(self.character_sets['punctuation']))

    def generate_password(self, length):
        if length < len(self.required_characters):
            raise ValueError("Длина пароля должна быть не менее количества обязательных символов")

        # Добавляем обязательные символы в пароль
        password = self.required_characters[:]

        all_characters = ''.join([
            self.character_sets['lowercase'] if self.use_lowercase else '',
            self.character_sets['uppercase'] if self.use_uppercase else '',
            self.character_sets['digits'] if self.use_digits else '',
            self.character_sets['punctuation'] if self.use_punctuation else ''
        ])

        for _ in range(length - len(self.required_characters)):
            password.append(random.choice(all_characters))

        # Перемешиваем список символов, чтобы обязательные символы не были всегда в начале
        random.shuffle(password)

        return ''.join(password)

if __name__ == "__main__":
    password_generator = Password(use_lowercase=True, use_uppercase=True, use_digits=True, use_punctuation=True)
    password_length = 8
    generated_password = password_generator.generate_password(password_length)
    print(f"Генерированный пароль длины {password_length}: {generated_password}")

    # Проверка корректности работы
    def check_password_requirements(password, use_lowercase, use_uppercase, use_digits, use_punctuation):
        if use_lowercase and not any(char in string.ascii_lowercase for char in password):
            return False
        if use_uppercase and not any(char in string.ascii_uppercase for char in password):
            return False
        if use_digits and not any(char in string.digits for char in password):
            return False
        if use_punctuation and not any(char in string.punctuation for char in password):
            return False
        return True

    print("Пароль соответствует требованиям:", check_password_requirements(
        generated_password,
        password_generator.use_lowercase,
        password_generator.use_uppercase,
        password_generator.use_digits,
        password_generator.use_punctuation
    ))
